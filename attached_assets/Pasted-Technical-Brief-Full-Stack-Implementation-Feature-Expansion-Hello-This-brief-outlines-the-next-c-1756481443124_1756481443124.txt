Technical Brief: Full-Stack Implementation & Feature Expansion
Hello! This brief outlines the next critical phase of development, focusing on backend architecture, database integration, security, and advanced feature implementation. The goal is to transition the application from a UI prototype to a fully functional, data-driven platform.

1. Backend & Database Architecture
1.1. Core Backend Implementation
The application currently lacks a functional backend. We need to build and deploy a robust backend service to handle all business logic, data persistence, and API requests.

Recommendation: While n8n is an excellent tool for workflow automation (e.g., routing messages, triggering notifications), it is not a replacement for a core backend. We recommend building the backend with a scalable framework like Node.js with Express/NestJS or a similar stack. The backend will be responsible for:

User authentication and session management.

CRUD operations for all application entities.

Serving as the single source of truth for the frontend application.

1.2. Database Schema and Integration
A comprehensive database review and implementation is required. All frontend features must be connected to the database via RESTful API endpoints.

Action Required:

Full Schema Review: Design and create the necessary database tables if they don't exist. The schema must support all current and planned features.

Required Tables (Initial List):

users: Stores user credentials, roles (admin, user), and profile info.

clients: Manages client/contact information.

tickets: Tracks support tickets/conversations with status, assigned user, etc.

messages: Stores all chat messages linked to tickets or clients.

settings: Persists application-wide or user-specific settings (e.g., custom themes).

announcements: Stores posts for the announcement board.

chatbots: Stores configurations for the AI features (API keys, prompts, mode).

sessions: Manages active user sessions.

Data Persistence for UI Features:

Theme Customization: User-selected colors (Reference: image_2690d3.png) must be saved to the settings or users table and fetched on application load to correctly render the UI. The current issue of colors not being applied must be resolved by linking it to the backend.

1.3. Inbound Message API (Webhook)
Action Required: Create a secure API endpoint (webhook) designed to receive inbound messages.

Requirements:

The endpoint must be able to process text, audio, and video message types.

It should parse the incoming data and route it to the appropriate backend service to be stored in the messages table and create or update a ticket.

2. Security: Authentication Overhaul
Critical Issue: The current authentication system is insecure and accepts any input. This needs a complete overhaul.

Action Required:

Implement Secure Authentication: Refactor the login process to use a secure, token-based mechanism (e.g., JWT). User credentials must be securely hashed and stored in the users table.

Create Default Admin User: The system must include a default admin user with elevated privileges upon initial setup.

Enforce Authorization: Implement a role-based access control (RBAC) system. All API endpoints and frontend routes must be protected and validate the user's token and role to grant or deny access.

3. New Feature: AI Integration (ChatBot Module)
3.1. Renaming and Module Setup
Action Required: Rename the "Agente de I.A" menu item to "ChatBot". This module will house all AI-related settings.

3.2. AI Mode Selection
Action Required: Inside the ChatBot settings page, implement a modal or UI switch that allows the user to select one of two modes: "ChatBot" or "AI Agent".

Logic:

These two modes must be mutually exclusive.

When a user enables one mode, the other must be automatically disabled.

Display a confirmation popup to the user when they switch modes (e.g., "Enabling AI Agent will disable the ChatBot. Do you want to continue?").

3.3. "AI Agent" Configuration
Action Required: When "AI Agent" mode is selected, the UI must provide the following configuration fields:

Gemini API Key: An input field for the user to securely enter their Gemini API key. This key must be stored encrypted in the database.

Agent Prompt: A textarea for the user to define the system prompt (e.g., "You are a friendly customer support agent specialized in...").

Both fields must be persisted in the chatbots table.

3.4. "ChatBot" Configuration
Action Required: When "ChatBot" mode is selected, provide a separate configuration interface. This can contain placeholders for now but should be designed for a more structured, rule-based bot.

4. UI/UX Adjustments
4.1. Chat Interface
Action Required:

Change the tab and page title from "CHAT" to "Chat".

Remove the video and audio call icons from the chat header.

Reference: image_268d0f.png